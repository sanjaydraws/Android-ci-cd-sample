
keystore ->
SHA ->
HashKey ->

both debug keystore generated same hashkey
EFo6GIZVLsnAzNve0RX9DzMYe/4=



generate debug keystore

keytool -genkey -v -keystore debug.keystore -storepass android -alias androiddebugkey -keypass android -keyalg RSA -keysi
ze 2048 -validity 10000


// to generate hashkey
keytool -exportcert -alias empida -keystore /Users/chanchalwarde/Documents/Project/sanjay/EmpidaNewProject/EmpidaKeystore | openssl sha1 -binary | openssl base64




//generate hashkey from code
    fun printHashKey(){
        try {
            val info = packageManager?.getPackageInfo("com.sanjayprajapat.androidcicd", PackageManager.GET_SIGNATURES)
            info?.signatures?.let {
                for (signature in info?.signatures) {
                    var md: MessageDigest
                    md = MessageDigest.getInstance("SHA")
                    md.update(signature.toByteArray())
                    val something: String = String(Base64.encode(md.digest(), 0))
                    //String something = new String(Base64.encodeBytes(md.digest()));
                    Log.e("hash key", something) //cSt5ojLmDGOoTFyVnckUSqLOef0=
                }
            }
        } catch (e1: PackageManager.NameNotFoundException) {
            Log.e("name not found", e1.toString())
        } catch (e: NoSuchAlgorithmException) {
            Log.e("no such an algorithm", e.toString())
        } catch (e: java.lang.Exception) {
            Log.e("exception", e.toString())
        }
    }

